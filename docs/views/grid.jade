extends  _inc/_layout.jade

block body
	.main-container
		h1.page-title Grid
		article.article.introduction
			p Barebones includes a responsive and semantic grid system. It allows you to target given components – for example, a sidebar – without littering your HTML with helper classes and unnecessary DIVs.

		article.article
			h2 Grid Settings
			p Specify your grid settings in your <span class="var">settings</span> file. If nothing is specified, default values are applied.

			table
				thead
					th Setting
					th Default Value
					th What it Does
				tr
					td <span class="var">columns</span>
					td 12
					td Specifies the number of columns in your grid
				tr
					td <span class="var">breakpoint</span>
					td 720px
					td The point at which columns should expand to 100%.
				tr
					td <span class="var">gutter</span>
					td 1/4
					td Gutters are created using margins. The gutter sizes is expressed as a fraction of the column widths (e.g. 1/8, 1/4 or 1/2). Cask supports any unit of measure for gutter values.10px,1.2rem,4%, and even2vw` are all valid inputs! Rems are preferred.


			h3 Example
			p To change your grid settings, you can use the following. Because of the way the project settings are called, you can update one or all of the settings as needed.

			.example
				pre.example-code
					code.language-scss.
						$grid: (
							columns: 12,
							gutter: 1/4,
						);

		article.article(id="containers")
			h2 Containers
			p Containers are used to center and restrict content width on the page. They are fluid, and the width is limited using the max-width property. They also include left and right padding to give breathing room on smaller devices, using the <span class="code">mobile-padding</span> value from the settings file.

			p You can create a container using the <span class="var">container($max-width, $mobile-gutter)</span> function.

			table
				thead
					th(colspan="2") Options
				tr
					td <span class="var">$max-width</span>
					td The max-width argument directly sets the max-width property on the element. any format that fits the max-width css specification will be accepted. This value will default to the max-width set in the $grid-settings.
				tr
					td
				tr
					td <span class="var">$mobile-gutter</span>
					td  boolean attribute . removes the mobile gutter on smaller screens (for example, if you're nesting a container inside another container).

			.example
				pre.example-code
					code.language-scss.
						.element {
							@include container(600, $mobile-gutter: false);
						}

		article.article(id="columns")

			h2 Columns

			p To create different widths at different breakpoints, use the <span class="var">if-above($device)</span> mixin.

			table
				thead
					th(colspan="2") Options
				tr
					td <span class="var">$columns</span>
					td Number of columns the component spans, of the total number defined in your settings file (by default this is 12). The columns argument is the unitless number of columns the element spans.
				tr
					td <span class="var">$position</span> <em>(optional)</em>
					td If the column is the last one, pass in the 'last' keyword to remove the margin.
				tr
					td <span class="var">$gutter</span> <em>(optional)</em>
					td Change the default gutter by passing in a size (e.g. 1/2), or remove it altogether.
				tr
					td <span class="var">$offset</span> <em>(optional)</em>
					td Change the default gutter by passing in a size (e.g. 1/2), or remove it altogether.



			h3 Span Mixin
			p Use the <span class="var">span($columns, $position, $gutter)</span> function to create a new container.

			.example
				.example-rendered
					.example-wrapper
						.example-sidebar(style="background-color: lightpink")
						.example-content-block(style="background-color: lightpink")
				pre.example-code.border-bottom
					code.language-scss.
						.sidebar {
						  @include span(4); // Creates a column that spans 4 colums
						}
						.content {
						  @include span(8, $position: last); // Creates a column that spans 8 columns
						}
				pre.example-code
					code.language-scss.
						.sidebar {
							width: 34.5%;
							margin-right: 1.25%;
							float: left;
						}
						.content {
							width: 34.5%;
							margin-right: 1.25%;
							float: left;
						}

			h3 Span Function
			p The above mixin includes the heaviour you'd expect from a grid sysem – marings are added to create the gutters, and floats are applied depending on the positiong of the element. If you want something more basic, the <span class="var">span($columns)</span> function is identical to the mixin, but returns only a width value.

			.example.margin-bottom-double
				.example-rendered
					.example-wrapper
						.example-span(style="background-color: lightpink")
				pre.example-code.border-bottom
					code.language-scss.
						.example-span {
							width: span(4);
						}
				pre.example-code
					code.language-scss.
						.example-span {
							width: 56.1%;
						}

			h3 Offset

			.example.margin-bottom-double
				.example-rendered
					.example-wrapper
						.example-offset(style="background-color: lightpink")

				pre.example-code
					code.language-scss.
						.sidebar {
							@include span(8, $offset: 4);
						}

		article.article
			h2 Galleries
			p Galleries are made up of elements that repeat across multiple lines. It works in a similar way to the span mixin, with the only difference being that the right margin is removed from the last item of the row, based on the number of items per row. Because of the way this works, if you want to specify different grid sizes at different breakpoints, the mixin needs to be called within a media query context to avoid nth-item collisions.


			.example.margin-bottom-double
				.example-rendered
					.photo-gallery
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item

				pre.example-code.border-bottom
					code.language-scss.
						.photo-gallery {
							@include clearfix; // Clears the floats.
						}

						.photo-gallery-item {
							@include gallery(3);
							// Creates a gallery with each item taking up 3 columns of your grid
							// (on a 12 grid-layout, this would be 4 items). This will be the case at every screen size.
						}

						.photo-gallery-item {
							+if-between(device-x-small, device-medium) {
								@include gallery(6);
							}
							+if-above(device-medium) {
								@include gallery(4);
							}
							// Creates a gallery with each item taking up 3 columns of your grid
							// (on a 12 grid-layout, this would be 4 items). This will be the case at every screen size.
						}

				pre.example-code
					code.language-css.
						.photo-gallery {
							@include clearfix; // Clears the floats.
						}

						.photo-gallery-item {
							width: 22.85714%;
							margin-right: 2.85714%;
							float: left;
						}

						.photo-gallery-item(:nth-child: 3n + 1) {
							width: 22.85714%;
							margin-right: 0;
							float: right;
						}


		article#containers.article
			h2 Helper Classes
			p Various helper classes are also generated to quickly create grids – <a href="helpers.html">see here</a>.

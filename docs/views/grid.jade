extends  _inc/_layout.jade

block body
	.main-container
		h1.page-title Grid
		article.article.introduction
			p Barebones includes a responsive and semantic grid system. It allows you to target given components – for example, a sidebar – without littering your HTML with helper classes and unnecessary DIVs.

		article.article
			h2 Grid Settings
			p First, you need to specify global grid settings in your <span class="var">settings</span> file. If nothing is specified, default values are applied.

			table
				thead
					th Setting
					th Default
					th Description
				tr
					td <span class="var">columns</span>
					td 12
					td Specifies the number of columns in your grid.
				tr
					td <span class="var">breakpoint</span>
					td 720px
					td The point at which columns should expand to 100%. This only gets used for the generic helper classes.
				tr
					td <span class="var">gutter</span>
					td 1/4
					td Gutters are created using margins, expressed as a fraction of a column width (e.g. 1/8, 1/4 or 1/2).


		article.article(id="containers")
			h2 Containers
			p Containers are used to center and restrict content width on the page. They are fluid, and the width is limited using the max-width property. They also clear floated columns.

			p Create a new container using the <span class="var">container($max-width)</span> function.

			.example
				.example-rendered
					.example-container

				pre.example-code.border-bottom
					code.language-scss.
						.container {
							@include container(600px);
						}

				pre.example-code
					code.language-scss.
						.container {
							zoom: 1;
							margin: 0 auto;
							max-width: 600px;
						}

						.container:before, .container:after {
							content: "";
							display: table;
						}

						.container:after {
							clear: both;
						}

		article.article(id="columns")

			h2 Columns

			p Columns can be created using either the <span class="var">span($columns, $position, $gutter)</span> mixin, or the <span class="var">span($columns)</span> function. The former does more work for you and allows you to specify various options, whilst the latter simply returns the element width based on the given number of columns.


			h3 Span Mixin

			p The CSS generated is viewport-agnostic. To create different widths at different breakpoints, combine this with the <a href="mixins.html#media-queries">media query</span> mixins.

			table.table-lined.margin-bottom-double
				thead
					th(colspan="2") Options
				tr
					td <span class="var">$columns</span>
					td Number of columns the component spans, of the total number defined in your settings file (by default this is 12).
				tr
					td <span class="var">$position</span> <em>(optional)</em>
					td If the column is the last one, pass in the 'last' keyword to remove the margin-right property and float the column to the right.
				tr
					td <span class="var">$gutter</span> <em>(optional)</em>
					td Change the default gutter by passing in a size (e.g. 1/2), or remove it altogether.
				tr
					td <span class="var">$offset</span> <em>(optional)</em>
					td Offset the container by a given number of columns.


			.example
				.example-rendered
					.example-wrapper
						.example-sidebar(style="background-color: lightpink")
						.example-content-block(style="background-color: lightpink")
				pre.example-code.border-bottom
					code.language-scss.
						.sidebar {
							@include if-above(device-medium) {
								@include span(4); // Creates a column that spans 4 colums above this size.
							}
						}

						.content {
							@include if-above(device-medium) {
								@include span(8, $position: last); // Creates a column that spans 8 colums above this size.
							}
						}
				pre.example-code
					code.language-scss.
						.sidebar {
							width: 30.43478%;
							margin-right: 4.34783%;
							float: left;
						}
						.content {
							width: 60.21739%;
							margin-right: 0;
							float: right;
						}

			h3 Span Function
			p The <span class="var">span($columns)</span> only returns a width value for the container - nothing else.

			.example.margin-bottom-double
				.example-rendered
					.example-wrapper
						.example-span(style="background-color: lightpink")
				pre.example-code.border-bottom
					code.language-scss.
						.example-span {
							width: span(4);
						}
				pre.example-code
					code.language-scss.
						.example-span {
							width: 56.1%;
						}

			h3 Offset
			p You can offset a container by a given number of columns by passing in an argument for the <span class="var">$offset</span> value.

			.example.margin-bottom-double
				.example-rendered
					.example-wrapper
						.example-offset(style="background-color: lightpink")

				pre.example-code
					code.language-scss.
						.sidebar {
							@include span(8, $offset: 4);
						}

		article.article
			h2 Galleries
			p Galleries are made up of elements that repeat across multiple lines. It works in a similar way to the span mixin, with the only difference being that the right margin is removed from the last item of the row, based on the number of items per row.

			p If you want to specify different grid sizes at different breakpoints, the mixin needs to be called within a media query context to avoid nth-item collisions.


			.example.margin-bottom-double
				.example-rendered
					.photo-gallery
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item
						.photo-gallery-item

				pre.example-code.border-bottom
					code.language-scss.
						.photo-gallery {
							@include clearfix; // Clears the floats.
						}

						.photo-gallery-item {
							@include gallery(3);
							// Creates a gallery with each item taking up 3 columns of your grid
							// (on a 12 grid-layout, this would be 4 items). This will be the case at every screen size.
						}

						.photo-gallery-item {
							@include if-between(device-x-small, device-medium) {
								@include gallery(6);
							}
							@include if-above(device-medium) {
								@include gallery(4);
							}
							// Creates a gallery with each item taking up 3 columns of your grid
							// (on a 12 grid-layout, this would be 4 items). This will be the case at every screen size.
						}

				pre.example-code
					code.language-css.
						.photo-gallery {
							@include clearfix; // Clears the floats.
						}

						.photo-gallery-item {
							width: 22.85714%;
							margin-right: 2.85714%;
							float: left;
						}

						.photo-gallery-item(:nth-child: 3n + 1) {
							width: 22.85714%;
							margin-right: 0;
							float: right;
						}


		article#containers.article
			h2 Helper Classes
			p Various helper classes are also generated to quickly create grids – <a href="helpers.html">see here</a>.

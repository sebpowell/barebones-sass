extends _inc/_layout.jade

block body
	.main-container
		h1.page-title Getting Started

		article.article.introduction
			p Barebones is a boilerplate to help you build your own <a href="http://sass-lang.com/" target="_blank">SASS</a> framework. It is not a fully-fledged library, but a set of tools common to all projects; a grid system, helper classes and a range of resuable mixins, put together in a convenient package to kickstart your next project. Only the bare essentials are included – so you can spend less time overwriting and more time creating.


			.info-panel.warning
				p In order to use Susy 2 with Rails you must update your Gemfile to use sass-rails ~> 5.0.0. This is because Susy 2 requires Sass >= 3.3 whilst Rails 4.1 and below include a version of sass-rails which does not support Sass 3.3.

			p Principles

			p Deliberatley verbose to make it super clear to people what each class is doing.
			p Code with Confidence

			p Using clear, humanized naming conventions, Basscss is quick to internalize and easy to reason about while speeding up development time with more scalable, more readable code.

			p No Side Effects

			p Things behave exactly as expected with immutable utilities and styles that do one thing well to help prevent common pitfalls with CSS.

			p Composable
			p Reusable, interoperable styles work like building blocks to lay the foundation for any stylesheet and can be mixed and matched in any number of combinations.

			p Designed for Design
			p Basscss strikes a balance between consistency and flexibility to allow for rapid prototyping and quick iterative changes when designing in the browser.

			p Responsive by Default
			p Basscss provides lightweight, performant styles and flexible utilities to design for any device and to help reduce boilerplate in stylesheets.

			p Unassuming

			p Modular and customizable typography and layout styles don’t dictate what things should look like and play well with other stylesheets and frameworks.

			p Responsive Everything should be 100% responsive. Your website should work regardless of a users device or screensize. Don't break the functionality of HTML with CSS. Readable No matter the lighting, or the device, font-sizes should be large enough and contrast should be high enough. Performant Code isn't for making a developers life easier. It's for improving the lives of our users. If it's not doing that, why write it. A developer's time is not precious. A user's time is. Code should be optimized for performance. Modular Modules > Monoliths Tachyons isn't a monolithic framework. It's a collection of self contained modules that can be mixed and matched or used independently. Use what you want, leave what you don't. Reusable Doing one thing well, promotes reusability and reduces redundancy in a codebase. Easy Designing in the browser should be easy. If a computer can do it, you shouldn't have to. Features Runs on Postcss A flexible plugin framework for post-processing css. View on Github Mobile-first architecture Base classes are mobile by default. Can be overridden by namespaced classes targeting larger breakpoints. Layout debugging Small css modules for debugging stacking and layout issues. Can easily be turned on or off during development. Composable classes Construct anything from complex layouts to responsive components with a series of single purpose classes. Cohesive design system Scale based on the powers of two. Starting at .25 Responsive Grid Infinitely nestable. Fully fluid. Extremely light-weight. Customize, or extend Tachyons is meant to be edited and customized to meet the needs of your product. It's just css. It isn't precious. Don't be afraid to change: class names, media queries, breakpoints, or values.

		article.article
			h2 Why does the world need Barebones?

			p It probably doesn't, but here goes; we wanted to create a lightweight SASS library that we could share between projects – powerful enough to allow us to focus on design, and lightweight enough to stay out of our way.

			p Over time, we've learned a lot about how to structure our SASS projects in a cohesive, scalable and maintainable way. We thought other people might find this knowledge useful so decided to release this as a package in the public domain.

			h2 Why build your own framework?

			p Existing frameworks such as Bootstrap and Foundation are great for prototyping, but typically lack flexibility. If you want to create your own theme, you're going to spend a lot of time with the !important flag – a great way for things to quickly become completely unmanageable.

			p Building your own framework puts you in the driving seat, giving you full control over how your app or website looks, without being shoe-horned into someone else's design system.

		article.article(id="installing")

			h2 Installing Barebones

			p If you're new to SASS, you'll first need to make sure you're able to <a href="http://sass-lang.com/install" target="_blank">compile SASS files</a>.

			h3 1. Install the package
			p Barebones is available as a Bower package. You can also download the latest release from <a href="https://github.com/sebpowell/barebones-sass">Github</a> and integrate the source files directly. This will add the Susy repository to your bower_components directory or create a bower_components directory for you.

			p If you want to copy in the Sass files directly, and skip any package management, you can do that too.

			p Download the zip file from GitHub.
			p Copy the contents of the “sass” folder (feel free to remove everything else).
			p Paste the files in your project “sass” folder (whatever you call it).

			pre
				code.language-bash
					| bower install barebones-sass --save

			h3 2. Create a settings file

			p Barebones code allows you to specify your own individual project settings – just grab <a href="https://github.com/sebpowell/barebones/blob/master/docs/css/_settings.scss" target="_blank">the example file</a> </strong> and change the values to fit your needs.

			h3 3. Create your main SASS file
			p Import your newly created settings file, followed by <span class="var">_barebones.sass</span> into your main SASS file. When you're done, it should look like this:

			pre.margin-bottom-double
				code.language-html.
					|-- css/
					|--| main.sass
					|--| _settings.sass
					|
					|-- bower-components/
					|--| barebones/
					|--|--| _base.sass

			pre
				code.language-scss.
					// Always import the settings file first
					@import _settings.scss

					// Import Barebones – the path will depend on your setup.
					@import bower-components/_base.scss

					// Your stuff can come here.

		article.article(id="requirements")

			h2 Requirements

			p Barebones relies heavily on <a href="">SASS maps</a> to work, so you'll need to make sure you're using SASS 3.3 or higher. Additionally, vendor prefixing mixins are not used or included as you can use the <a href="https://github.com/postcss/autoprefixer" target="_blank">autoprefixer plugin</a> to do this.

		article.article(id="support")

			h2 Support
			p This library is under active development. If you need help, or if you think something is broken or can be improved, send an email to <a href="mailto:tech@getagent.co.uk">tech@getagent.co.uk</a>.


		article.article(id="background")

			h2 Background Reading & Acknowledgements
			p Barebones was heavily inspired by other people's brains. Here are some of them in case you're interested in doing some more reading. Inspiration and motivationGemma is evolutionary, not revolutionary. Its philosophical and stylistic leanings have been heavily influenced by the following people and projects:

			ul.bullet-list
				li
					a(href="http://fourkitchens.com/blog/article/you-dont-need-bootstrap" target="_blank") You Don't Need Bootstrap – Ian Carrico
				li
					a(href="https://smacss.com/" target="_blank") Scalable & Module Architecture for CSS – Jonathan Snook
				li
					a(href="https://dzone.com/articles/why-its-good-idea-roll-your" target="_blank") Why It's a Good Idea to Roll Your Own CSS Framework
				li
					a(href="http://daverupert.com/2013/04/responsive-deliverables/" target="_blank") Responsive Deliverables – Dave Rupert
				li
					a(href="http://www.sitepoint.com/managing-responsive-breakpoints-sass/" target="_blank") Managing Responsive Breakpoints with SASS – Hugo Giraudel
				li
					a(href="http://www.zell-weekeat.com/mappy-breakpoints" target="_blank") Mappy Breakpoints – Zell Liew
				li
					a(href="http://thesassway.com/beginner/how-to-structure-a-sass-project" target="_blank") How to Structure a SASS Project – John Long
				li
					a(href="http://thesassway.com/advanced/modular-css-naming-conventions" target="_blank") Modular CSS Naming Conventions – John Long
				li
					a(href="http://www.sitepoint.com/architecture-sass-project/") Architecture for a SASS Project – Hugo Giraudel
				li
					a(href="http://www.sitepoint.com/architecture-sass-project/") SUSY




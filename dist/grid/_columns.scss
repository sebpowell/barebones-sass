@mixin span($columns, $position: "", $gutter: map-get($grid, gutter), $offset: 0) {
	float: left;
	$length: length($columns);

	// Check if a new grid context is being created.
	@if $length > 2 {
		$columnCount: nth($columns, 1);
		$columnContext:  nth($columns, 3);
	}

	@if map-get($grid, type) == "padding" {
		padding: 0 $gutter / 2;
		@if $length > 2 {
			width: (100% / $columnContext) * $columnCount;
		}
		@else {
			width: (100% / map-get($grid, columns)) * $columns;
		}
	}


	@if $offset > 0 {
		@if map-get($grid, type) == "padding" {
			margin-left: (100% / map-get($grid, columns)) * $offset;
		}

		@if map-get($grid, type) == "margin" {
			margin-left: columnCalc($offset);
		}
	}


	@if $position == "last" {
		float: right;
		@if map-get($grid, type) == "padding" {

		}
		@if map-get($grid, type) == "margin" {
			margin-right: 0;
		}
	}
}



// Generate column helper classes.
@for $i from 1 through map-get($grid, columns) {
	@if map-get($grid, type) == "padding" {
		.#{map-get($settings, prefix)}columns-#{$i} {
			padding: 0 map-get($grid, gutter) / 2;

			@include if-below( map-get($grid, breakpoint) ) {
				width: 100%;
				&:not(:last-of-type) {
					@if map-get($grid, mobile-spacing) {
						margin-bottom: map-get($grid, mobile-spacing);
					}

					@else {
						margin-bottom: map-get($grid, gutter) / 2;
					}
				}
			}

			@include if-above( map-get($grid, breakpoint) ) {
				width: $i * (100% / map-get($grid, columns));
				float: left;
			}
		}
	}
}

// Generate breakpoint-specific column helper classes.
@if map-get($settings, responsiveHelpers) != false {
	@each $key, $value in $breakpoints {
		@for $i from 1 through map-get($grid, columns) {
			@if map-get($grid, type) == "padding" {
				.#{map-get($settings, prefix)}columns-#{$i}-#{$key} {
					padding: 0 map-get($grid, gutter) / 2;

					@include if-below($key) {
						&:not(:last-of-type) {
							@if map-get($grid, mobile-spacing) {
								margin-bottom: map-get($grid, mobile-spacing);
							}

							@else {
								margin-bottom: map-get($grid, gutter) / 2;
							}
						}
					}

					@include if-above($key) {
						width: $i * (100% /  map-get($grid, columns));
						float: left;
					}
				}
			}
		}
	}
}

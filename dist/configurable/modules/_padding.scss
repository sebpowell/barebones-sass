$bb-padding-settings-default: (
	"import": true,
	"name": "padding",
	"modifiers": (
		"top": "top", 
		"right": "right",
		"bottom": "bottom",
		"left": "left",
		"vertical": "vertical",
		"horizontal": "horizontal"
	)
);

$bb-padding-settings: () !default;

$bb-padding-settings: map-merge($bb-padding-settings-default, $bb-padding-settings);

@if (map-get($bb-padding-settings, "import") == true) {

	$className: map-get($bb-padding-settings, "name");

	$i: 1;

	@while $i <= strip-unit($bb-spacing-scale) {
		
		$n: $i * strip-unit($bb-spacing-base);	
		
		@each $key, $value in map-deep-get($bb-padding-settings, "modifiers") {
			
			@if $key == "vertical" {
				@include helpers("#{$className}#{$bb-global-delimiter}#{$value}#{$bb-global-delimiter}#{$i}", "padding-top: #{$n}px", "padding-bottom: #{$n}px");
			}

			@else if $key == "horizontal" {
				@include helpers("#{$className}#{$bb-global-delimiter}#{$value}#{$bb-global-delimiter}#{$i}", "padding-left: #{$n}px", "padding-right: #{$n}px");
			}

			@else {
				@include helpers("#{$className}#{$bb-global-delimiter}#{$value}#{$bb-global-delimiter}#{$i}", "padding-#{$key}: #{$n}px");
			}

			@include helpers("#{$className}#{$bb-global-delimiter}#{$i}", "padding: #{$n}px");
		}
		
		$i: $i + 1;
	}
	
	@include helpers("no-#{$className}", "padding: 0 !important");

	.no-#{$className}-last {
		&:last-of-type {
			padding: 0 !important;
		}
	}

	@include helpers("#{$className}-auto", "padding: 0 auto");
}
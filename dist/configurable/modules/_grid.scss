$bb-grid-default: (
	"columns": 12,
	"gutter": 20px,
	"breakpoint": 780px,
	"container": "columns"
) !default;

$bb-grid: map-merge($bb-grid-default, $bb-grid);

$bb-columns: (
	"import": true,
	"name": "columns"
) !default;

$bb-offset: (
	"import": true,
	"name": "offset"
) !default;

$breakpoint: map-get($bb-grid, "breakpoint");
$columns:  map-get($bb-grid, "columns");
$gutter:  map-get($bb-grid, "gutter");

@if (map-get($bb-columns, "import") != false) {

	$className:  map-get($bb-columns, "name");

	// Generate column helper classes.
	@for $i from 1 through $columns {
		.#{$className}#{$bb-global-delimiter}#{$i} {
			padding: 0 $gutter / 2;

			@include if-below($breakpoint) {
				width: 100%;
				&:not(:last-of-type) {
					margin-bottom: $gutter;
				}
			}

			@include if-above($breakpoint) {
				float: left;
				width: $i * (100% / $columns);
			}
		}
	}

	// Generate breakpoint-specific column helper classes.
	@if ($bb-responsive != false) {
		@each $key, $value in $bb-breakpoints {
			@for $i from 1 through $columns {
				.#{$className}#{$bb-global-delimiter}#{$i}#{$bb-global-delimiter}above#{$bb-global-delimiter}#{$key} {
					padding: 0 $gutter / 2;

					@include if-below($key) {
						&:not(:last-of-type) {
							margin-bottom: $gutter;
						}
					}

					@include if-above($key) {
						float: left;
						width: $i * (100% /  $columns);
					}
				}

				.#{$className}#{$bb-global-delimiter}#{$i}#{$bb-global-delimiter}below#{$bb-global-delimiter}#{$key} {
					padding: 0 $gutter / 2;

					@include if-below($key) {
						&:not(:last-of-type) {
							margin-bottom: $gutter;
						}
					}

					@include if-below($key) {
						float: left;
						width: $i * (100% /  $columns);
					}
				}
			}
		}
	}

	// Column container.
	.#{map-get($bb-grid, "container")} {
		@include clearfix;
		margin-left: -( $gutter / 2);
		margin-right: -( $gutter / 2);

		&.no#{$bb-global-delimiter}gutter {
			margin-left: 0;
			margin-right: 0;
			> [class^="#{$className}"] {
				padding: 0;
			}
		}

		@include if-above($breakpoint) {
			&.gutter#{$bb-global-delimiter}half {
				margin-left: -($gutter / 4);
				margin-right: -($gutter / 4);
				> [class^="#{$className}"] {
					padding: 0 $gutter / 4;
				}
			}

			&.gutter#{$bb-global-delimiter}double {
				margin-left: -($gutter);
				margin-right: -($gutter);
				> [class^="#{$className}"] {
					padding: 0 $gutter;
				}
			}
		}
	}
}

@if (map-get($bb-offset, "import") != false) {

	$className:  map-get($bb-offset, "name");

	@for $i from 1 through $columns {
		.#{$className}#{$bb-global-delimiter}#{$i} {
			@include if-above($breakpoint) {
				margin-left: $i * (100% /  $columns);
			}
		}

		@if $bb-responsive != false {
			@each $breakpoint, $value in $bb-breakpoints {
				.#{$className}#{$bb-global-delimiter}#{$i}#{$bb-global-delimiter}above#{$bb-global-delimiter}#{$breakpoint} {
					@include if-above($value) {
						margin-left: $i * (100% /  $columns);
					}
				}

				.#{$className}#{$bb-global-delimiter}#{$i}#{$bb-global-delimiter}below#{$bb-global-delimiter}#{$breakpoint} {
					@include if-below($value) {
						margin-left: $i * (100% /  $columns);
					}
				}
			}
		}
	}
}
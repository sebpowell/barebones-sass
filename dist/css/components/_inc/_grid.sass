// Are both grid and columns
@for $i from 1 through map-get($theme, columns)
	@each $key, $value in $breakpoints
		.grid-#{$i}-#{$key}
			+no-bullet
			+clearfix
			+respond-above($key)
				margin-left: -(map-get($theme, gutter))
				margin-right: -(map-get($theme, gutter))

			@if $i < 1
				margin-left: 0
				margin-right: 0
			> li
				width: 100%
				margin-bottom: map-get($theme, gutter)
				&:last-child
					margin-bottom: 0

				+respond-above($key)
					&:nth-child(#{$i}n + 1)
						// Clears floats after a row is complete for variable height elements.
						// This doesn't work if multiple classes are set (e.g. 2-device-small and 3-device-medium)
						clear: both


				@if $i < 1
					padding: 0

				+respond-above($key)
					width: 100% / $i !important
					float: left
					padding: 0 map-get($theme, gutter) !important
					// &:nth-last-of-type(-n+#{$i})
					// 	margin-bottom: 0


=grid-container($grid-container)
	+clearfix
	+respond-above(map-get($grid-container, no-gutter))
		margin-left: -(map-get($grid-container, gutter))
		margin-right: -(map-get($grid-container, gutter))


@each $key, $value in $breakpoints
	@for $i from 1 through map-get($theme, columns)
		.columns-#{$i}-#{$key}
			width: 100%
			margin-bottom: sizes(double)

			+respond-above($key)
				width: $i * (100% / map-get($theme, columns))
				float: left
				padding: 0 sizes(base)
				margin-bottom: 0
				// &:nth-last-of-type(-n+#{$i})
				// 	margin-bottom: 0

// Generates classes for columns 1 - 12.
@for $i from 1 through map-get($theme, columns)
	.columns-#{$i}
		width: 100%
		float: left
		margin-bottom: sizes(double)
		&:last-child
			margin-bottom: 0
		+respond-above(device-small)
			padding: 0 16px
			margin-bottom: 0
			width: $i * (100% / map-get($theme, columns))
			// Add nth-class helper

// Generates classes for column offsets.
@for $i from 1 through map-get($theme, columns)
	.offset-#{$i}
		+respond-above(device-medium-large)
			margin-left: $i * (100% / map-get($theme, columns))

// Start with a row container. Inside the row container, use the columns. The module or component is then place dinside each column.
// Change ths to /columns-cotainer?
.row
	+clearfix
	position: relative

	&.vertical-align
		+respond-above(device-medium-large)
			display: table
			> [class^="column"]
				float: none
				height: 100%
				display: table-cell
				vertical-align: middle


	+respond-above(device-medium-large)
		margin-left: -(sizes(base))
		margin-right: -(sizes(base))
		// > [class^="column"]
		// 	padding: 0


// .set-container-width

@mixin grid-test($map)
	+clearfix
	width: 100%
	float: left
	margin-bottom: (map-get($theme, gutter)) * 2
	
	@if map-get($map, debug) == true
		> div
			background-color: red

	&:last-child
		margin-bottom: 0

	@each $key, $value in $breakpoints
		@if map-get($map, $key)
			+respond-above($key)
				width: (100% / map-get($map, $key))
				padding: 0 sizes(base)
				// &:nth-child(#{map-get($map, $key)}n)
				// 	clear: both


@mixin grid-container($map)
	+clearfix
	list-style-type: none
	@each $key, $value in $breakpoints
		@if map-get($map, $key)
			+respond-above($key)
				margin-left: -(sizes(base))
				margin-right: -(sizes(base))


.no-gutter
	margin-left: 0 !important
	margin-right: 0 !important
	> [class^="column"], > li
		padding: 0 !important


// Generate gutter widths
@each $size, $var in $sizes
	.gutter-#{$size}
		+respond-above(device-medium)
			// Added margin to factor in container-wide padding on smaller sizes
			margin-left: -($var) !important
			margin-right: -($var) !important
			> [class^="column"], > li
				padding: 0 $var !important
				// Add mobile




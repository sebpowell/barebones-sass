@function map-fetch($map, $keys) {
	$key: nth($keys, 1);
	$length: length($keys);
	$value: map-get($map, $key);
	@if ($length > 1) {
		$rest: ();
		@for $i from 2 through $length {
			$rest: append($rest, nth($keys, $i))
		}
		@return map-fetch($value, $rest)
	} @else {
		@return $value;

	}
}


@function map-extend($map, $maps.../*, $deep */) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {

        // If value is a nested map and same key from map is a nested map as well
        @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
          // Recursive extend
          $value: map-extend(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge($map, ($key: $value));
      }
    }
  }

  @return $map;
}


@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		@if map-has-key($map, $key) {
			$map: map-get($map, $key);
		}
		@else {
			$moo: nth($keys, 1);
			$rest: ();
			$length: length($keys);
			@for $i from 1 through $length {
				$rest: append($rest, nth($keys, $i));

			}
			// @warn "The key '#{$key}' doesn't exist. Please check your settings file.";
		}
	}
	@return $map;
}


// Helper functions
@function sizes($size) {
	@if map-has-key($sizes, $size) {
	 @return map-get($sizes, $size);
	}
	@else {
		// @warn "#{$size} does not exist in sizes map."
	}
}

@function grid($object) {
	@if map-has-key($grid, $object) {
	 @return map-get($grid, $object);
	}
	@else {
	//  @warn "#{$object} does not exist in grid map."
	}
}

@function colors($args...) {
	@if length($args) > 1 {
		$category: nth($args, 1);
		$name: nth($args, 2);
		@return map-deep-get($colors, $category, $name);
	}
	@else {
		$name: nth($args, 1);
		@return map-get($colors, $name);
	}
}

@function font($object) {
	@return map-deep-get($fonts, $object, name);
}

@function weights($family, $weight) {
	@return map-deep-get($fonts, $family, weights, $weight);
}

@function breakpoints($object) {
	@return map-get($breakpoints, $object);
}

@function layers($object) {
	@if map-has-key($layers, $object) {
	 @return map-get($layers, $object);
	}
	@else {
		// @warn "#{$object} does not exist in layers map."
	}
}

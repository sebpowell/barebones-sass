@function theme($category, $value: '') {
	@return map-get(map-get($settings, $category), $value);
}

@function map-fetch($map, $keys) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($map, $key);
  @if ($length > 1) {
    $rest: ();
    @for $i from 2 through $length {
      $rest: append($rest, nth($keys, $i))
    }
    @return map-fetch($value, $rest)
  } @else {
    @return $value;
  }
}



@function colours($colour-cat, $colour) {
	// Returns each category in colours (e.g. primary)
  @return map-get(map-get(map-get($settings, colours), $colour-cat), $colour);
}

@function sizes($size) {
	// Returns each category in colours (e.g. primary)
  @return map-get(map-get(map-get($settings, layout), sizes), $size);
}


@function themes($keys...) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($settings, $key);


  @if ($length > 1) {
    $rest: ();
    @for $i from 2 through $length {
      $rest: append($rest, nth($keys, $i))
    }
    @return map-fetch($value, $rest)
  } @else {
    @return $value;
  }

  @if map-has-key($key) {
  	@debug "Map has this key: #{$key}"
  }
}

@function grid($object) {
	@return map-get(map-get(map-get($settings, layout), grid), $object);
}

@function font($object) {
	@return map-get(map-get(map-get($settings, fonts), $object), name);
}

@function weights($family, $object) {
	@return map-get(
		map-get(
			map-get(
				map-get($settings, fonts), $family
			), 
		weights), 
	$object);
}

@function breakpoints($object) {
	@return map-get(map-get(map-get($settings, layout), breakpoints), $object);
}

@function layers($object) {
	@return map-get(map-get(map-get($settings, layout), layers), $object);
}


@function layers($object) {
	@return map-get(map-get(map-get($settings, layout), layers), $object);
}
	 
	// @warn "The key #{$object} is not in the map ’$layer’"
	// @return null

